### 蓝牙通信
Bluetooth Low Energy (BLE) 是在Bluetooth 4.0中引入的。Android 4.3开始引入，Android4.4修复了很多bug，才稳定
现在低功耗蓝牙（BLE）连接都是建立在 GATT (Generic Attribute Profile) 协议之上。GATT 是一个在蓝牙连接之上的发送和接收很短的数据段的通用规范，这些很短的数据段被称为属性（Attribute）

GAP是Generic Access Profile的首字母缩写，它控制蓝牙中的连接和广告。GAP使您的设备对外界可见，并确定两个设备如何（或不能）彼此交互。

低功耗蓝牙设备分为中央设备和外围设备：
1)外围设备一次只能连接到一个中央设备（如手机），但是中央设备可以连接到多个外围设备。
2)外围设备称为GATT服务器，它保存ATT查找数据和服务及特征定义，而GATT客户端则向服务器发送请求。

蓝牙BLE中的外围设备通过两种方式向外广播数据：Advertising Data Payload（广播数据）和Scan Response Data Payload（扫描回复），每种数据最长可以包括31个字节。
其中广播数据是必需的，因为外设必需不停的向外广播，让中心设备知道它的存在。扫描回复是可选的，中心设备可以向外设请求扫描回复，这里包含一些设备额外的信息，例如设备的名字。

Services与Charateristics
|---------------------------|
|		   PROFILE			|
|	|--------------------|  |
|	|	   SERVICES		 |  |
|	| |----------------| |	|
|	| | CHARATERISTICS | |  |
|   | |----------------| |	|
|	| | CHARATERISTICS | |  |
|   | |----------------| |	|
|	| | CHARATERISTICS | |  |
|   | |----------------| |	|
|	|	   SERVICES		 |  |
|	| |----------------| |	|
|	| | CHARATERISTICS | |  |
|   | |----------------| |	|
|	| | CHARATERISTICS | |  |
|   | |----------------| |	|
|	| | CHARATERISTICS | |  |
|   | |----------------| |	|
|	|--------------------|  |
|---------------------------|

数据包长度（MTU）：BLE4.2之前，默认是23字节，其中包括2字节的handle值和1字节的Operation码，所以留给应用层的数据长度只有20个字节。
BLE4.2中，MTU已经扩展到247个字节，除去3个字节，留给应用层的就是244个字节，大大提高了传输效率。
长/短包传输；
为了兼容BLE4.2之前的设备，BLE 4.2中MTU的默认大小仍然是23字节，但可以在连接后进行修改。当peripheral和central建立连接之后，central设备会发送 [ATT_Exchange_MTU_Req][5] 的请求包，包含了central所支持的MTU大小；peripheral会回应 [ATT_Exchange_MTU_Rsp][6] 应答包包含peripheral所支持的MTU大小，取两者之间最小的MTU作为两者通信的MTU。

BLE的4.0理论蓝牙传输速度1MB/s, BLE5.0是2MB/s

权限：
Manifest.permission.BLUETOOTH
Manifest.permission.BLUETOOTH_ADMIN
Manifest.permission.ACCESS_COARSE_LOCATION
Manifest.permission.ACCESS_FINE_LOCATION

扫描：

Android 5.0-
mBluetoothAdapter.startLeScan(postUUIDFilterMode ? null : uuids, mScanCallback);
private BluetoothAdapter.LeScanCallback mScanCallback = new BluetoothAdapter.LeScanCallback() {
	@Override
	public void onLeScan(BluetoothDevice bluetoothDevice, int i, byte[] bytes) {
		handleScanResult(bluetoothDevice, i, bytes);
	}
};

Android 5.0+
mBluetoothLeScanner = mBluetoothAdapter.getBluetoothLeScanner();
mBluetoothLeScanner.startScan(null, scanSettings, mScanCallback2);
ScanCallback mScanCallback2 = new ScanCallback() {
	@Override
	public void onScanResult(int callbackType, ScanResult result) {
		handleScanResult(result.getDevice(), result.getRssi(), result.getScanRecord().getBytes());
	}

	@Override
	public void onBatchScanResults(List<ScanResult> results) {
		super.onBatchScanResults(results);
	}

	@Override
	public void onScanFailed(int errorCode) {
		super.onScanFailed(errorCode);
	}
};
	

监听蓝牙状态变化广播
mContext.registerReceiver(mReceiver, new IntentFilter(BluetoothAdapter.ACTION_STATE_CHANGED));

Android BLE相关API
BluetoothDeivce：蓝牙设备，代表一个具体的蓝牙外设。
BluetoothGatt：通用属性协议，定义了BLE通讯的基本规则和操作
BluetoothGattCallback：GATT通信回调类，用于回调的各种状态和结果。
BluetoothGattService：服务，由零或多个特征组构成。
BluetoothGattCharacteristic：特征，里面包含了一组或多组数据，是GATT通信中的最小数据单元。
BluetoothGattDescriptor：特征描述符，对特征的额外描述，包括但不仅限于特征的单位，属性等。

蓝牙管理器：BluetoothManager = Context#getSystemService(Context#BLUETOOTH_SERVICE)；
蓝牙适配器：BluetoothAdapter BluetoothManager#getAdapter();

蓝牙设备：BluetoothDevice
连接蓝牙设备：BluetoothDevice#connectGatt(Context context, boolean autoConnect, BluetoothGattCallback callback)
蓝牙回调：BluetoothGattCallback

连接蓝牙设备后，返回 蓝牙BluetoothGatt

BluetoothGattService BluetoothGatt#getService(UUID uuid)
BluetoothGattCharacteristic BluetoothGattService#getCharacteristic(UUID uuid)
BluetoothGatt#writeCharacteristic(BluetoothGattCharacteristic characteristic)

public abstract class BluetoothGattCallback {
	
	//发现服务，对某个特征值设置监听
	public void onServicesDiscovered(BluetoothGatt gatt, int status) {
		//监听外设特征值改变
		​//无论是对外设写入新值，还是读取外设特定Characteristic的值，其实都只是单方通信。如果需要双向通信，可以在BluetoothGattCallback#onServicesDiscovered中对某个特征值设置监听（前提是该Characteristic具有NOTIFY属性）：
		//设置订阅notificationGattCharacteristic值改变的通知
		mBluetoothGatt.setCharacteristicNotification(notificationGattCharacteristic, true);
		//获取其对应的通知Descriptor
		BluetoothGattDescriptor descriptor = notificationGattCharacteristic.getDescriptor(UUID.fromString("00002902-0000-1000-8000-00805f9b34fb"));
		if (descriptor != null){ 
			//设置通知值
			descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);
			boolean descriptorResult = mBluetoothGatt.writeDescriptor(descriptor);
		}
    }

	//外设修改自己的特征值进行回复时，手机端会触发BluetoothGattCallback#onCharacteristicChanged()方法，获取到外设回复的值，从而实现双向通信。
	public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
		if (status == BluetoothGatt.GATT_SUCCESS) {
			//获取外设修改的特征值
			byte[] value = characteristic.getValue()
			//对特征值进行解析
			
		｝
	}			
}


经典蓝牙：
1）扫描设备：BluetoothAdapter#startDiscovery()，通过注册广播来接收回调
IntentFilter intentFilter = new IntentFilter();
intentFilter.addAction(BluetoothDevice.ACTION_FOUND);
intentFilter.addAction(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);
RyBluetoothManager.getInstance().getContext().registerReceiver(receiver, new IntentFilter(BluetoothDevice.ACTION_FOUND));
低功耗蓝牙（BLE）：BluetoothAdapter#startLeScan() or BluetoothLeScanner#startScan()


### 笔记视图绘制逻辑
1. Matrix的坐标转换

1)在onLayout方法中初始化Matrix：缩放，水平/垂直偏移
```java
	Matrix mScaleMatrix = new Matrix();
	mScaleMatrix.reset();
	mScaleMatrix.postScale(mInitScale, mInitScale);
	//如果是平板设备，则向右偏移
	if (UiUtils.isTablet(this.getContext().getResources())) {
		mScaleMatrix.postTranslate(mCenterX - (float) IPenConfig.W * mInitScale / 2, 0);
	} else {
		mScaleMatrix.postTranslate(0, mToolBarHeight);
	}
```

2)获取缩放系数
```java
    /**
     * 获得当前的缩放比例
     *
     * @return 当前的缩放比例
     */
    public float getScale() {
        mScaleMatrix.getValues(matrixValues);
        return matrixValues[Matrix.MSCALE_X];
    }
```

3)绘制
```java
	canvas.save();
	//把Matrix的变换应用到canvas上的所有对象：缩放，水平/垂直偏移
	canvas.concat(mScaleMatrix);
	
	....
	
	canvas.restore();
```

4)触摸坐标映射
a. 因为显示的图片大小是原图经过缩放的，所以当触摸绘制时，要将触摸的坐标映射到原图坐标中进行绘制，所以进行坐标转换：
```java
    /**
     * 根据当前图片的Matrix获得图片的范围
     *
     * @return 图片的范围 {@link android.graphics.Rect}
     */
    private RectF getMatrixRectF() {
        mRect.set(0, 0, IPenConfig.W, IPenConfig.H);
        //将matrix值映射到RectF中
        mScaleMatrix.mapRect(mRect);
        return mRect;
    }
	
	    float eventX = (motionEvent.getX(0) - rectF.left) / getScale();
        float eventY = (motionEvent.getY(0) - rectF.top) / getScale();
	
```
触摸屏幕绘制时，是通过转换后的坐标eventX、eventY来绘制的。
b. 手写本绘制时，坐标转换逻辑与触摸屏的不一样：
```java
        float px = x * IPenConfig.SCALE;
        float py = y * IPenConfig.SCALE;
```
这里是通过手写本的分辨率与笔记设计稿大小，计算的一个固定缩放系数IPenConfig.SCALE，来进行坐标转换的。

2. 笔记绘制：二阶贝塞尔曲线拟合+变宽画笔绘制
a. 在Bitmap中进行绘制，提升绘制效率；
创建一个Bitmap，在Bitmap中进行绘制，View#onDraw()方法中绘制Bitmap图片即可。
b. 采用二阶贝塞尔曲线拟合，选取相邻两个轨迹点的中点作为二阶贝塞尔曲线的控制点；
二阶贝塞尔曲线公式：B(t) = (1-t)^2*P0 + 2t(1-t)*P1 + t^2*P2, t = [0, 1]。
c. 根据绘制的速度和压力值，转换成笔宽值，以实现笔锋效果。
手写本书写是采用压力值转换成笔宽，而触摸书写是通过书写速度转换笔宽。

d. 贴图的颜色是如何实现的？
贴图颜色采用了Android的Canvas的融合模式：PorterDuff.Mode.SRC_IN
```java
    public static Bitmap tintBitmap(Bitmap inBitmap, int tintColor) {
        if (inBitmap == null) {
            return null;
        }
        Canvas canvas = new Canvas(inBitmap);
        canvas.drawColor(tintColor, PorterDuff.Mode.SRC_IN);
        return inBitmap;
    }
```
橡皮檫的实现
```java
        mEraser = DrawUtils.createPaint();
        DrawUtils.initializePaint(mEraser, Color.TRANSPARENT, IPenConfig.DEFAULT_ALPHA,
                IPenConfig.DEFAULT_ERASER_WIDTH, false);
        mEraser.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
```

3. 手势与缩放回弹动画；
构造ScaleGestureDetector时，需要传入ScaleGestureDetector.OnScaleGestureListener对象，在onScale方法中获取缩放系数，并修改显示矩阵mScaleMatrix。

a. 初始化ScaleGestureDetector对象：
```java
	mScaleGestureDetector = new ScaleGestureDetector(context, this);
```

b. 在View的onTouch回调方法中，将事件传入
```java

	@Override
    public boolean onTouch(View view, MotionEvent motionEvent) {
	
		
		return mScaleGestureDetector.onTouchEvent(motionEvent);
	}
	
```

c. 在ScaleGestureDetector.OnScaleGestureListener对象的接口方法会接收回调
```java
    public interface OnScaleGestureListener {
        
        public boolean onScale(ScaleGestureDetector detector) {
			//获取手势放大系数
			float scaleFactor = detector.getScaleFactor();
			//设置缩放比例
			mScaleCenterPoint.set(detector.getFocusX(), detector.getFocusY());
			//设置缩放系数与缩放中心点
			mScaleMatrix.postScale(scaleFactor, scaleFactor, detector.getFocusX(), detector.getFocusY());
		}

        public boolean onScaleBegin(ScaleGestureDetector detector);

        public void onScaleEnd(ScaleGestureDetector detector);
    }
```

4. 撤销与重做；
每一笔绘制后都会生成一个完整的笔记Bitmap，这个Bitmap会放到一个定长的列表UndoList中，当用户点击撤销时，把UndoList中最后一个Bitmap添加到RedoStack中。当用户点击重做时，将RedoStack的栈顶元素弹出，并绘制到画布上，并把这一笔加到UndoList中。如果绘制重新绘制一笔，需要将这笔放到UndoList中，并清空RedoStack中的元素。


5. 笔记数据持久化；
每一笔是一个DrawingPath，DrawingPath内部采用byte数组存储；x,y,t,p。其中t用4个字节表示，其他三个变量用2个字节表示。
一个笔记是一个Note对象，Note对象中保存了一个DrawingPath列表，每一笔是一个DrawingPath对象；

6. 自定义View；
a. 重写onMeasure()方法，调用setMeasuredDimension()方法；确定视图的宽高。调用setMeasuredDimension()之后，getMeasuredWidth()和getMeasuredHeight()的值才是有效值。
```java
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		//MeasureSpec（View的内部类）测量规格为int型，值由高2位规格模式specMode和低30位具体尺寸specSize组成。其中specMode只有三种值:
		//MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；
		//MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；
		//MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定； 
	}
```

b. 对于自定义ViewGroup，重写onLayout()方法，在onLayout中对子视图进行布局定位。普通视图可以在onLayout()中做初始化工作，如创建Bitmap之类。
c. 在onDraw方法中，处理视图的绘制工作，不宜在此方法中做复杂耗时的操作。
d. 在xml中定义属性值，在构造器中解析属性值，在布局文件xml中使用属性。



### 网络通信okHttp+Retrofit



### 主流三方库框架分析：greenDao，glide，
####leakcanary
默认监听带生命周期的对象Activity、Fragment。2.0之后，增加了ViewModel的内存泄漏监听。
Activity，注册了Application#registerActivityLifecycleCallbacks生命周期回调，在onActivityDestroyed()回调中，触发引用检查。
Fragment，SupportFragmentManager#registerFragmentLifecycleCallbacks，FragmentLifecycleCallbacks
引用检查的过程：先将memory dump(调用Debug#dumpHprofData(path))出来，然后通过haha库来进行引用分析，查看Activity对象是否仍然被引用。
调用了shark库来进行引用的分析；


####dagger



####GreenDao
1. GreenDao通过greenDao-gradle-plugin插件对添加注解的实体类进行解析，自动生成对应的DAO类、DaoMaster类和DaoSession，用来管理Dao类。
2. 调用方通过DaoMaster和DaoSession，来获取对应实体的DAO类，实现数据库的增删改查操作。
DaoMaster --> DaoSession --> xxxDAO
3. xxxDAO继承自AbstractDao，在AbstractDao中，增加了一个缓存层(哈希表)。
a. 从DAO中取某个key值的对象时，先从这个缓存层(哈希表)里查找，找到了就直接返回；
b. update或insert一个对象时，更新缓存，以主键为key以对象为值，存储到一个键值对中；
c. 调用xxxDAO#detach(T entity)，将对象从缓存中移除。




### Android框架相关：动画，activity启动流程，handler消息分发机制，绘制流程与自定义View，事件分发机制，Binder，Service
#### 动画
1. 属性动画
通过反射的方式获取对象的setter和getter方法，不断地调用setter方法来更新属性值。
PropertyValuesHolder#setupSetterOrGetter(Class targetClass, HashMap<Class, HashMap<String, Method>> propertyMapMap, String prefix, Class valueType)
PropertyValuesHolder#getPropertyFunction(Class targetClass, String prefix, Class valueType)
动画持续时间
动画插值方式
动画重复次数
重复行为
刷新率

ValueAnimator只能在有looper的线程中启动；
每个线程有一个ThreadLocal对象的AnimationHandler，AnimationHandler通过MyFrameCallbackProvider来产生心跳，每隔10一次心跳，回调属性动画更新属性值。
MyFrameCallbackProvider是通过单例Choreographer，通过调用FrameCallback的doFrame(long frameTimeNanos)来渲染每一帧的。

属性动画为什么要在有Looper的线程中执行？因为在动画更新引擎Choreographer中，使用了Handler了来实现定时的。而构造Handler需要有Looper；

2. 视图/补间动画：

透明度：AlphaAnimation
旋转：RotateAnimation
位移；TranslateAnimation
缩放：ScaleAnimation
动画可以通过xml或代码来定义

View#startAnimation(Animation)
View#clearAnimation()
View#setAnimation(Animation)

3. 帧动画
帧动画就是顺序播放一组预先定义好的图片，就类似于我们观看视频，就是一张一张的图片连续播放。
帧动画的使用很简单，总共就两个步骤：
1、在res/drawable目录下定义一个XML文件，根节点为系统提供的animation-list，然后放入定义更好的图片；
2、使用AnimationDrawable类播放第一步定义好的Drawable中的图片，形成动画效果；
```java
    Button button = (Button) findViewById(R.id.bt_001);
    button.setBackgroundResource(R.drawable.frame_animation);//把Drawable设置为button的背景
    //拿到这个我们定义的Drawable，实际也就是AnimationDrawable
    AnimationDrawable animationDrawable = (AnimationDrawable) button.getBackground();
    animationDrawable.start();//开启动画
```
#### Activity启动流程
ActivityManagerService作用是负责Activity和Service的启动和生命周期管理。
每一个应用程序都有一个ActivityThread来表示应用程序的主进程，而每一个ActivityThread都包含有一个ApplicationThread实例，它是一个Binder对象，负责和其它进程进行通信。

https://blog.csdn.net/luoshengyang/article/details/6685853


#### handler消息分发机制
Message：消息类，存储消息信息，采用链表结构存储，按消息的处理时间先后进行排序；
MessageQueue：消息队列，主要方法：enquequeMessage()将消息加入到队列中，next()获取下一个可以执行发送的消息；
Looper：Looper#prepare()为线程创建消息队列，Looper#loop()进入消息循环，取出消息分发给对应的Handler处理。
Handler：消息发送、处理类；

1.Handler与Looper实例化总结
a. 在主线程中可以直接创建Handler对象，而在子线程中需要先调用Looper.prepare()才能创建Handler对象，否则运行抛出”Can’t create handler inside thread that has not called Looper.prepare()”异常信息。
b. 每个线程中最多只能有一个Looper对象，否则抛出异常。
c. 可以通过Looper.myLooper()获取当前线程的Looper实例，通过Looper.getMainLooper()获取主（UI）线程的Looper实例。
d. 一个Looper只能对应了一个MessageQueue。
e. 一个线程中只有一个Looper实例，一个MessageQueue实例，可以有多个Handler实例。

2. Handler发送消息：
Handler#enqueueMessage() --> MessageQueue#enqueueMessage()
使用Handler对象发送消息最终会调用到Handler#enqueueMessage()方法，此方法会调用到MessageQueue#enqueueMessage()，将Message对象加入到消息队列中，在MessageQueue中，消息采用链表结构进行存储。

3.消息处理：
Looper#loop() --> MessageQueue#next()  --> Handler#dispatchMessage()
在子线程调用Looper#loop()之后，进入消息循环中，通过MessageQueue#next()方法从消息队列中取出消息进行处理。如果当前时间没有消息需要处理时，MessageQueue#next()会阻塞。判断当前是否有消息需要处理是通过判断当前时间与消息的处理时间进行比较，如果当前时间等于或大于消息处理时间时，就从MessageQueue#next()返回该消息。在Looper#loop()中，取到消息之后，会将消息交给Handler#dispatchMessage()方法进行处理。

#### 绘制流程与自定义View
1.Activity#setContentView()源码分析总结 --> PhoneWindow#setContentView()
a. 创建一个DecorView的对象mDecor，该mDecor对象将作为整个应用窗口的根视图。
b. 依据Feature等style theme创建不同的窗口修饰布局文件，并且通过findViewById获取Activity布局文件该存放的地方（窗口修饰布局文件中id为content的FrameLayout）。
c. 将Activity的布局文件添加至id为content的FrameLayout内。
d. 当setContentView设置显示OK以后会回调Activity的onContentChanged方法。Activity的各种View的findViewById()方法等都可以放到该方法中，系统会帮忙回调。
e. 当我们自定义View时在构造函数inflate一个xml后可以实现onFinishInflate这个方法一些自定义的逻辑。
2.View的绘制过程：测量measure、布局layout、绘制draw三个过程
ViewRootImpl#performTraversals()
1)测量：measure过程主要就是从顶层父View向子View递归调用view.measure方法（measure中又回调onMeasure方法）的过程。具体measure核心主要有如下几点：
a. MeasureSpec（View的内部类）测量规格为int型，值由高2位规格模式specMode和低30位具体尺寸specSize组成。其中specMode只有三种值：
MeasureSpec.EXACTLY //确定模式，父View希望子View的大小是确定的，由specSize决定；
MeasureSpec.AT_MOST //最多模式，父View希望子View的大小最多是specSize指定的值；
MeasureSpec.UNSPECIFIED //未指定模式，父View完全依据子View的设计值来决定； 
View的measure方法是final的，不允许重载，View子类只能重载onMeasure来完成自己的测量逻辑。
b. 最顶层DecorView测量时的MeasureSpec是由ViewRootImpl中getRootMeasureSpec方法确定的（LayoutParams宽高参数均为MATCH_PARENT，specMode是EXACTLY，specSize为物理屏幕大小）。
c. ViewGroup类提供了measureChild，measureChild和measureChildWithMargins方法，简化了父子View的尺寸计算。
d. 只要是ViewGroup的子类就必须要求LayoutParams继承子MarginLayoutParams，否则无法使用layout_margin参数。
e. View的布局大小由父View和子View共同决定。
f. 使用View的getMeasuredWidth()和getMeasuredHeight()方法来获取View测量的宽高，必须保证这两个方法在onMeasure流程之后被调用才能返回有效值。

2)布局：layout也是从顶层父View向子View的递归调用view.layout方法的过程，即父View根据上一步measure子View所得到的布局大小和布局参数，将子View放在合适的位置上。具体layout核心主要有以下几点：
a. View.layout方法可被重载，ViewGroup.layout为final的不可重载，ViewGroup.onLayout为abstract的，子类必须重载实现自己的位置逻辑。
b. measure操作完成后得到的是对每个View经测量过的measuredWidth和measuredHeight，layout操作完成之后得到的是对每个View进行位置分配后的mLeft、mTop、mRight、mBottom，这些值都是相对于父View来说的。
c. 凡是layout_XXX的布局属性基本都针对的是包含子View的ViewGroup的，当对一个没有父容器的View设置相关layout_XXX属性是没有任何意义的。
d. 使用View的getWidth()和getHeight()方法来获取View测量的宽高，必须保证这两个方法在onLayout流程之后被调用才能返回有效值。

3)绘制：绘制过程就是把View对象绘制到屏幕上，整个draw过程需要注意如下细节：
a. 如果该View是一个ViewGroup，则需要递归绘制其所包含的所有子View。
b. View默认不会绘制任何内容，真正的绘制都需要自己在子类中实现。
c. View的绘制是借助onDraw方法传入的Canvas类来进行的。
d. 区分View动画和ViewGroup布局动画，前者指的是View自身的动画，可以通过setAnimation添加，后者是专门针对ViewGroup显示内部子视图时设置的动画，可以在xml布局文件中对ViewGroup设置layoutAnimation属性（譬如对LinearLayout设置子View在显示时出现逐行、随机、下等显示等不同动画效果）。
e. 在获取画布剪切区（每个View的draw中传入的Canvas）时会自动处理掉padding，子View获取Canvas不用关注这些逻辑，只用关心如何绘制即可。
f. 默认情况下子View的ViewGroup.drawChild绘制顺序和子View被添加的顺序一致，但是你也可以重载ViewGroup.getChildDrawingOrder()方法提供不同顺序。

https://blog.csdn.net/yanbober/article/details/46128379

ActivityThread#handleResumeActivity() -> WindowManagerImpl#addView() -> WindowManagerGlobal#addView() -> ViewRootImpl#setView() --> ViewRootImpl#requestLayout()。
在ViewRootImpl#setView () 会通过跨进程的方式向 WindowManagerService 发起一个调用，将 DecorView 最终添加到 Window 上。
这就是它们三者的关系，一层一层的往下调用。（WindowManagerImpl 是 WindowManager 的实现类）

Activity的attach中生成PhoneWindow对象;
setContentView中初始化DecorView（ViewGroup）;
在LayoutInflater进行对布局文件的解析之后更加解析的数据
根据解析出的数据执行View的构造函数进行View的构造，同时生成ViewTree。

####Activity的布局文件是如何加载显示出来的？分三步：
1. 在Activity启动时onActivity()方法中，调用setContentView()。在PhoneWindow中，调用LayoutInflater，将布局xml文件构建成一颗以DecorView为根视图的视图树。
2. ActivityThread#handleResumeActivity() -> WindowManagerImpl#addView() -> WindowManagerGlobal#addView() -> ViewRootImpl#setView() -> ViewRootImpl#requestLayout()。将视图树加载到窗口中，并创建了ViewRootImpl，作为操作视图树的入口。
3. 视图树的绘制是从根视图开始，经过测量、布局、绘制三个环节，每个环节都是递归调用，最终将视图绘制在窗口上。

#### 事件分发机制
Activity#dispatchTouchEvent() --> PhoneWindow#superDispatchTouchEvent() --> DecorView#superDispatchTouchEvent() --> FrameLayout#dispatchTouchEvent()

View#dispatchTouchEvent(MotionEvent event)
View#onTouch()
View#onTouchEvent() ---> onClick()(ACTION_UP)

ViewGroup#dispatchTouchEvent(MotionEvent e)
ViewGroup#onInterceptTouchEvent(MotionEvent e)
View#onTouch()
View#onTouchEvent() ---> onClick()(ACTION_UP)

super(View)#dispatchTouchEvent(MotionEvent event)
ViewGroup#onTouch()
ViewGroup#onTouchEvent() ---> onClick()(ACTION_UP)

1. onTouch和onTouchEvent有什么区别，又该如何使用？
从源码中可以看出，这两个方法都是在View的dispatchTouchEvent中调用的，onTouch优先于onTouchEvent执行。如果在onTouch方法中通过返回true将事件消费掉，onTouchEvent将不会再执行。
另外需要注意的是，onTouch能够得到执行需要两个前提条件，第一mOnTouchListener的值不能为空，第二当前点击的控件必须是enable的。因此如果你有一个控件是非enable的，那么给它注册onTouch事件将永远得不到执行。对于这一类控件，如果我们想要监听它的touch事件，就必须通过在该控件中重写onTouchEvent方法来实现。
2. Android事件分发是先传递到ViewGroup，再由ViewGroup传递到View的。
3. 在ViewGroup中可以通过onInterceptTouchEvent方法对事件传递进行拦截，onInterceptTouchEvent方法返回true代表不允许事件继续向子View传递，返回false代表不对事件进行拦截，默认返回false。
4. 子View中如果将传递的事件消费掉，ViewGroup中将无法接收到任何事件。

#### Binder
https://blog.csdn.net/Luoshengyang/article/details/6618363


#### Service



### 应用性能优化
布局优化
内存优化
启动优化
网络优化
包大小优化
编译速度优化

### 虚拟机相关：内存，类加载，方法分派机制，线程安全
见ProcessOn



### 算法与数据结构
见ProcessOn、leetcode



### 组件化，热修复，gradle插件、插件化
#### 组件化
1. 见space，ppt

2. ARouter

#### 热修复

#### gradle插件



#### 插件化
1. 什么是插件化：
a. Android插件化技术，可以实现功能模块的按需加载和动态更新，其本质是动态加载未安装的apk。
b. 插件化要解决的三个核心问题：类加载、资源加载、组件生命周期管理
2. 类加载
Android中常用的两种类加载器：PathClassLoader和DexClassLoader，它们都继承于BaseDexClassLoader。
PathClassLoader主要用来加载系统类和应用程序的类，在ART虚拟机上可以加载未安装的apk的dex，在Dalvik则不行。
DexClassLoader的构造函数比PathClassLoader多了一个，optimizedDirectory参数，这个是用来指定dex的优化产物odex的路径，在源码注释中，指出这个参数从API 26后就弃用了。
DexClassLoader用来加载未安装apk的dex。
3. 资源加载
Android系统通过Resource对象加载资源，因此只需要添加资源（即apk文件）所在路径到AssetManager中，即可实现对插件资源的访问。
由于AssetManager的构造方法时hide的，需要通过反射区创建。
4. 组件生命周期管理
对于Android来说，并不是说类加载进来就可以使用了，很多组件都是有“生命”的；因此对于这些有血有肉的类，必须给他们注入活力，也就是所谓的组件生命周期管理。
在解决插件中组件的生命周期，通常的做法是通过Hook相应的系统对象，实现欺上瞒下，后面将通过Activity的插件化来进行讲解。

Android 9.0上Android开始对私有API的使用进行限制，所以后面插件化可能退出历史主流，但是了解插件化涉及到的知识和技术，可以更好的理解Android系统

谷歌官方为什么禁止使用热修复和插件化等能动态更新APP的技术呢？
- 主要是不利于管控，应用只有在上架的时候进行合规性审核。合规性的意思是指，是否有暴力黄色内容、是否违反隐私协议等。如果通过动态化技术更新了APP之后，使得它无法管控这些APP。

### 编码规范相关：checkstyle，lint，gitlab





### 设计模式
见有道云笔记



### 多线程，线程池




### ANR异常



